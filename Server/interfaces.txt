1. Using library object classes //Create the database Database db= new Database(“myDatabase”, “username”, “password”); 
 
//Create some columns TableColumn colId= new TableColumn(“Id”,DataType.Int); TableColumn colName= new TableColumn(“Name”,DataType.Text); TableColumn colEmail= new TableColumn(“Email”,DataType.Email); List<TableColumn> tableColumns=  new List<TableColumn>(){colId, colName, colEmail}; 
 
//Create the table with the columns Table table= new Table(“myTable”, tableColumns); 
 
//Add some tuples to the table (as strings to simplify) table.AddTuple(new List<string>(){“1”, “Maider”, “maider@hotmail.com”}; table.AddTuple(new List<string>(){“2”, “Adolfo”, “adolfo@gmail.com”}; 
 
//Add the table to the database db.AddTable(table); 
 
//Print all the tuples from the tables and close it Console.WriteLine(db.SelectAllTuples(“myTable”)); db.Close(); 
 
2. Using the MiniSQL interface //Create the database Database db= new Database(“myDatabase”, “username”, “password”); 
 
//Create table string result= db.RunMiniSQLQuery(“CREATE TABLE myTable (‘Id’ INT,’Name’ TEXT, ‘Email’ TEXT)”); if (result != MiniSQL.Success)  Console.WriteLine(“Error creating table”); else {  db.RunMiniSQLQuery(“INSERT INTO myTable VALUES (‘1’,’Maider’,’maider@hotmail.com’)”);  db.RunMiniSQLQuery(“INSERT INTO myTable VALUES (‘2’,’Adolfo’,’adolfo@gmail.com’)”);  Console.WriteLine (db.RunMiniSQLQuery(“SELECT * FROM myTable”)); } 
3. Query Output (string) Select First the selected columns, then the tuples: 
[‘Id’,’Name’,’Email’]{‘1’,‘Maider’,’maider@hotmail.com’}{‘2’,’Adolfo’,’adolfo@gm ail.com’} 
 
If there are no tuples selected (empty), only the selected columns: 
 
[‘Id’,’Name’,’Email’] Other queries 
public const string CreateDatabaseSuccess = "Database created"; public const string OpenDatabaseSuccess = "Database opened"; public const string DeleteDatabaseSuccess = "Database deleted"; public const string BackupDatabaseSuccess = "Database backed up"; 
 
public const string CreateTableSuccess = "Table created"; public const string InsertSuccess = "Tuple added"; public const string TupleDeleteSuccess = "Tuple(s) deleted"; public const string TupleUpdateSuccess = "Tuple(s) updated"; 
 
public const string SecurityProfileCreated = "Security profile created"; public const string SecurityUserCreated = "Security user created"; public const string SecurityProfileDeleted = "Security profile deleted"; public const string SecurityUserDeleted = "Security user deleted"; public const string SecurityPrivilegeGranted = "Security privilege granted"; public const string SecurityPrivilegeRevoked = "Security privilege revoked"; public const string SecurityUserAdded = "User added to security profile"; 
 
public const string Error = "ERROR: "; 
 
public const string WrongSyntax = Error + "Syntactical error"; public const string DatabaseDoesNotExist = Error + "Database does not exist"; public const string TableDoesNotExist = Error + "Table does not exist"; public const string TableAlreadyExists = Error + "Table exists already"; public const string ColumnDoesNotExist = Error + "Column does not exist"; public const string IncorrectDataType = Error + "Incorrect data type"; 
 
public const string SecurityIncorrectLogin = Error + "Incorrect login"; public const string SecurityNotSufficientPrivileges = Error + "Not sufficient privileges"; public const string SecurityProfileAlreadyExists = Error + "Security profile already exists"; public const string SecurityUserAlreadyExists = Error + "Security user already exists"; public const string SecurityProfileDoesNotExist = Error + "Security profile does not exist"; public const string SecurityUserDoesNotExist = Error + "Security user does not exist";